Most Used Coding Lines:

---Split input by one or many space:
String[] input = scanner.nextLine().split("\\s++");

---String to list of Chars:
List<Character> chars = new ArrayList<>();
chars = STRING.chars().mapToObj(e -> (char)e).collect(Collectors.toList());

---Order List Alphabeticall and print:
CLASS.stream().sorted((p1, p2) -> p1.OBJECT.compareTo(p2.OBJECT)).forEach(System.out::println);

---Order List by Integer and print:
CLASS.stream().sorted((s1, s2) ->Integer.compare(s1.Integer, s2.Integer)).forEach(System.out::println);

---Print List of Strings:
sout(String.join("delimeter , . ,", ListOfString));

---Order List by Double and print:
CLASS.stream().sorted((s1, s2) ->Double.compare(s1.DOUBLE, s2.DOUBLE)).forEach(System.out::println);

---Filter List and print:
CLASS.stream().filter(person -> person.OBJECT > 30).forEach(System.out::println);

---List to String:
@Override
        public String toString() {
            return String.format("STRING", this..., this..., this..., this...);
        }

---MAP
HashMap - not in order;
LinkedHashMap - in order of code writing;
TreeMap - in key(a, b, c; 1, 2, 3) order;

Map<key:, value:> NAME = new Hashmap<>();
-Add to map: NAME.put();
getL name.get(key:);
delete: NAME.remove(key:);
itterate(for): NAME.entrySet alt+enter;

---Count letters in String
for (char letter : letters) {
            if (letter != 32){
                if (lettersCount.containsKey(letter)){
                    lettersCount.put(letter, lettersCount.get(letter) + 1);
                }else {
                    lettersCount.put(letter, 1);
                }
            }
        }

        lettersCount.forEach((key, value) -> System.out.println(key + " -> " + value));
		
---Put if absent:
resources.putIfAbsent(key: , value:);

---Print map:
MAP.forEach((key, value) -> System.out.println(key + ": " + value));

---Print map with List:
list.forEach((key, value) -> {
            System.out.println(key + ": " + list.get(key).size());
            list.get(key).stream().forEach(s -> System.out.println("-- " + s));
        });

***ComputiveAbsend!!! ///TODO;

---Text Processing:
!String is immutable!!! NOT Changing;
STRING.substring(beginIndex, endIdex);
STRING.indexOf("CHAR");
STRING.lastIndexOf();
STRING.contains("String or Char") - boolean: true or false;
STRING = STRING.replace("STRING or CHAR", "new STRING or CHAR");

StringBuilder sb = new StringBuilder();
sb.append("String"); --- add to sb;
sb.append(System.lineSeparator()); --- add new line (%n);
sb.insert(Index, "String"); --- Insert in index of sb;
sb.replace(StartIndex, EndIndex, "newString"); --- replace with new String;
sb.delete(StartIndex, EndIndex); --- delete;
sb.deleteCharAt(Index); --- delete char at index;

--- Check if String contains Letters, numbers...:
boolean isValid = false;
            if (String.length() >= 3 && String.length() <= 16)
                for (int i = 0; i < String.length(); i++) {
                    char symbol = String.toLowerCase(Locale.ROOT).charAt(i);
                    if ((symbol >= 97 && symbol <= 122) || (symbol>= 48 && symbol<= 57)) {
                        isValid = true;
                    }else {
                        isValid = false;
                        break;
                    }

                }
            if (isValid){
                System.out.println(String);
            }
			
--- Same as --- Check if String contains Letters, numbers...:
Arrays.stream(scanner.nextLine().split(", "))
                .filter(username -> username.length() >= 3 && username.length() <= 16)
                .filter(username -> username.matches("[a-zA-Z\\d]+"))
                .forEach(System.out::println);

--- Check if String contains Letters, numbers...: AS METHOD:::
static boolean isValid (String word){
return word.length() >= 3 && word.length() && word.matches("[a-zA-Z\\d]+");
}

---RegEx(Regular Expressions): //TODO: regexr.com
String[] s = STRING.split("//s+"); - one or more space " ";
\d - number in regex;
\d+ - numberS in regex;
Operator "OR" in Regex: "|";
\d* --- 0 or more;
\d+ --- 1 or more;
\d? --- 0 or 1;
\b --- word boundary;

- Matching same sybmols before and after, Word with Upper case and 2to6 letters:
([?<nameOfGroup>=/])[A-Z][a-z]{2,6}\nameOfGroup

Pattern pattern = Pattern.compile(([?<nameOfGroup>=/])[A-Z][a-z]{2,6}\nameOfGroup);
Matcher matcher = pattern.matcher(input);

boolean foundSomething = matcher.find();
while (foundSomething){
...
...
...
foundSomething = matcher.find();
}